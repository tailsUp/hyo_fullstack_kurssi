let AuthenticationError,ACCESS_TOKEN_EXPIRATION_TIME,signJwt,verifyJwt;_cbe‍.x([["default",()=>_cbe‍.o]]);_cbe‍.w("apollo-server",[["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}]]);_cbe‍.w("../config",[["ACCESS_TOKEN_EXPIRATION_TIME",["ACCESS_TOKEN_EXPIRATION_TIME"],function(v){ACCESS_TOKEN_EXPIRATION_TIME=v}]]);_cbe‍.w("./signJwt",[["default",["signJwt"],function(v){signJwt=v}]]);_cbe‍.w("./verifyJwt",[["default",["verifyJwt"],function(v){verifyJwt=v}]]);





const subject = 'accessToken';

class AuthService {
  constructor({ accessToken, dataLoaders }) {
    this.accessToken = accessToken;
    this.dataLoaders = dataLoaders;
  }

  async getUserId() {
    if (!this.accessToken) {
      return null;
    }

    let tokenPayload;

    try {
      tokenPayload = verifyJwt(this.accessToken, { subject });
    } catch (e) {
      return null;
    }

    return tokenPayload.userId;
  }

  async getUser() {
    const id = await this.getUserId();

    if (!id) {
      return null;
    }

    return this.dataLoaders.userLoader.load(id);
  }

  async getUserOrFail(error) {
    const normalizedError =
      error || new AuthenticationError('Authorization is required');

    const user = await this.getUser();

    if (!user) {
      throw normalizedError;
    }

    return user;
  }

  createAccessToken(userId) {
    const expiresAt = new Date(Date.now() + ACCESS_TOKEN_EXPIRATION_TIME);

    return {
      accessToken: signJwt(
        { userId },
        {
          expiresIn: expiresAt - new Date(),
          subject,
        },
      ),
      expiresAt,
    };
  }
}

_cbe‍.d(AuthService);
