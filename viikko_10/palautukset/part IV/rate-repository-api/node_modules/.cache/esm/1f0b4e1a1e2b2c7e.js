let Koa,cors,morgan,bodyParser,Router,through,ApplicationError,NotFoundError,createDataLoaders,logger,api;_1e2‍.x([["default",()=>_1e2‍.o]]);_1e2‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_1e2‍.w("@koa/cors",[["default",["cors"],function(v){cors=v}]]);_1e2‍.w("koa-morgan",[["default",["morgan"],function(v){morgan=v}]]);_1e2‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_1e2‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_1e2‍.w("through2",[["default",["through"],function(v){through=v}]]);_1e2‍.w("./errors",[["ApplicationError",["ApplicationError"],function(v){ApplicationError=v}],["NotFoundError",["NotFoundError"],function(v){NotFoundError=v}]]);_1e2‍.w("./utils/createDataLoaders",[["default",["createDataLoaders"],function(v){createDataLoaders=v}]]);_1e2‍.w("./utils/logger",[["default",["logger"],function(v){logger=v}]]);_1e2‍.w("./api",[["default",["api"],function(v){api=v}]]);











const logStream = through((chunk) => {
  logger.info(chunk.toString());
});

const errorHandler = () => async (ctx, next) => {
  try {
    await next();
  } catch (e) {
    const normalizedError =
      e instanceof ApplicationError
        ? e
        : new ApplicationError('Something went wrong');

    ctx.status = normalizedError.status || 500;
    ctx.body = normalizedError;

    logger.error(e, { path: ctx.request.path });
  }
};

const app = new Koa();

app.use(bodyParser());
app.use(errorHandler());

app.use(morgan('combined', { stream: logStream }));

app.use(async (ctx, next) => {
  ctx.dataLoaders = createDataLoaders();
  await next();
});

app.use(cors());

const apiRouter = new Router();

apiRouter.use('/api', api.routes());

app.use(apiRouter.routes());

app.use((ctx) => {
  throw new NotFoundError(`The path "${ctx.request.path}" is not found`);
});

_1e2‍.d(app);
