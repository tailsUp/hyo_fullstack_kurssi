let ApolloServer,toApolloError,ApolloError,ValidationError,AuthService,createDataLoaders,logger,resolvers,typeDefs;_1e2‍.x([["default",()=>_1e2‍.o]]);_1e2‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["toApolloError",["toApolloError"],function(v){toApolloError=v}],["ApolloError",["ApolloError"],function(v){ApolloError=v}]]);_1e2‍.w("yup",[["ValidationError",["ValidationError"],function(v){ValidationError=v}]]);_1e2‍.w("./utils/authService",[["default",["AuthService"],function(v){AuthService=v}]]);_1e2‍.w("./utils/createDataLoaders",[["default",["createDataLoaders"],function(v){createDataLoaders=v}]]);_1e2‍.w("./utils/logger",[["default",["logger"],function(v){logger=v}]]);_1e2‍.w("./graphql/schema",[["resolvers",["resolvers"],function(v){resolvers=v}],["typeDefs",["typeDefs"],function(v){typeDefs=v}]]);







const apolloErrorFormatter = (error) => {
  logger.error(error);

  const { originalError } = error;
  const isGraphQLError = !(originalError instanceof Error);

  let normalizedError = new ApolloError(
    'Something went wrong',
    'INTERNAL_SERVER_ERROR',
  );

  if (originalError instanceof ValidationError) {
    normalizedError = toApolloError(error, 'BAD_USER_INPUT');
  } else if (error.originalError instanceof ApolloError || isGraphQLError) {
    normalizedError = error;
  }

  return normalizedError;
};

const createApolloServer = () => {
  return new ApolloServer({
    resolvers,
    typeDefs,
    formatError: apolloErrorFormatter,
    context: ({ req }) => {
      const authorization = req.headers.authorization;

      const accessToken = authorization
        ? authorization.split(' ')[1]
        : undefined;
      const dataLoaders = createDataLoaders();

      return {
        authService: new AuthService({
          accessToken,
          dataLoaders,
        }),
        dataLoaders,
      };
    },
  });
};

_1e2‍.d(createApolloServer);
