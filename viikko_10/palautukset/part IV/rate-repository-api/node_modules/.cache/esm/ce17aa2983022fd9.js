let gql,UserInputError,ForbiddenError,Review;_830‍.x([["typeDefs",()=>typeDefs],["resolvers",()=>resolvers],["default",()=>_830‍.o]]);_830‍.w("apollo-server",[["gql",["gql"],function(v){gql=v}],["UserInputError",["UserInputError"],function(v){UserInputError=v}],["ForbiddenError",["ForbiddenError"],function(v){ForbiddenError=v}]]);_830‍.w("../../models/Review",[["default",["Review"],function(v){Review=v}]]);



       const typeDefs = gql`
  extend type Mutation {
    """
    Deletes the review which has the given id, if it is created by the authorized user.
    """
    deleteReview(id: ID!): Boolean
  }
`;

       const resolvers = {
  Mutation: {
    deleteReview: async (obj, args, { authService }) => {
      const currentUser = await authService.getUserOrFail();

      const review = await Review.query().findById(args.id);

      if (!review) {
        throw new UserInputError(`Review with id ${args.id} does not exist`);
      }

      if (review.userId !== currentUser.id) {
        throw new ForbiddenError('User is not authorized to delete the review');
      }

      await Review.query().findById(args.id).delete();

      return true;
    },
  },
};

_830‍.d({
  typeDefs,
  resolvers,
});
